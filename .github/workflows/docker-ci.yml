name: Deploy to Server

on:
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:latest

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to server
      run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Get the latest container name with the pattern zd-article-grabber-N
          latest_container=$(docker ps -a --format "{{.Names}}" | grep 'zd-article-grabber-' | sort -V | tail -n 1)

          if [ -z "$latest_container" ]; then
            new_version=1
          else
            current_version=${latest_container##*-}
            new_version=$((current_version + 1))
          fi

          new_container_name="zd-article-grabber-$new_version"

          # Run a new container with the incremented name and mount the volumes correctly
          docker run -d -p 80:80 -p 443:443 \
          --name $new_container_name \
          -v /etc/letsencrypt/live/bepio.net/fullchain.pem:/etc/letsencrypt/live/bepio.net/fullchain.pem:ro \
          -v /etc/letsencrypt/live/bepio.net/privkey.pem:/etc/letsencrypt/live/bepio.net/privkey.pem:ro \
          ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:latest

          # Remove older containers if more than 3 exist
          containers_to_remove=$(docker ps -a --format "{{.Names}}" | grep 'zd-article-grabber-' | sort -V | head -n -3)
          if [ ! -z "$containers_to_remove" ]; then
            docker rm -f $containers_to_remove
          fi
          EOF

