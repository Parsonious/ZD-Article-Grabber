name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract Version Information
      id: extract_version
      run: |
        major_version=$(grep 'public const string Major' ./VersionInfo.cs | grep -o '[0-9]\+')
        minor_version=$(grep 'public const string Minor' ./VersionInfo.cs | grep -o '[0-9]\+')
        patch_version=$(grep 'public const string Patch' ./VersionInfo.cs | grep -o '[0-9]\+')
        echo "MAJOR_VERSION=$major_version" >> $GITHUB_ENV
        echo "MINOR_VERSION=$minor_version" >> $GITHUB_ENV
        echo "PATCH_VERSION=$patch_version" >> $GITHUB_ENV

    - name: Define Image Tag
      id: define_tag
      run: |
        IMAGE_TAG="PROD.${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:${{ env.IMAGE_TAG }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:${{ env.IMAGE_TAG }}

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to server
      run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          TIMESTAMP="${{ env.TIMESTAMP }}"
          version="PROD.${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}"
          container_name="$version"

          # Stop the current container
          current_container=$(docker ps -q --filter "name=PROD")
          if [ ! -z "$current_container" ]; then
            docker stop $current_container
          fi

          # Run the new container and capture output
          if ! output=$(docker run -d -p 8080:80 -p 8443:443 \
          --name $container_name \
          --env KeyManagement__KeyFolder=/api/keys \
          --env KeyManagement__Environment=Production \
          --env Jwt__ApiKey="${{ secrets.JWT_API_KEY_PROD }}" \
          --env Jwt__Issuer="https://bepio.net" \
          -v /var/www/bepio/api/source:/api/source \
          -v /etc/letsencrypt/live/bepio.net/fullchain.pem:/etc/letsencrypt/live/bepio.net/fullchain.pem:ro \
          -v /etc/letsencrypt/live/bepio.net/privkey.pem:/etc/letsencrypt/live/bepio.net/privkey.pem:ro \
          -v /var/www/bepio/api/prod/keys:/api/keys \
          -v /var/www/bepio/api/prod/logs:/api/logs \
          ${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:${{ env.IMAGE_TAG }} 2>&1); then
            echo "Docker run command failed with the following error:"
            echo "$output"
            exit 1
          fi
          echo "Containers before removal:"
          docker ps -a --filter "name=PROD"
          
          #clean up old containers if more than 1 exists
          container_count=$(docker ps -a --filter "name=PROD" -q | wc -l)
          
          if [ "$container_count" -gt 1 ]; then
            old_containers=$(docker ps -a --filter "name=PROD" \
            --format "{{.ID}} {{.CreatedAt}}" \
            | sort -k2,2r \
            | tail -n +4 \
            | awk '{print $1}')

            if [ ! -z "$old_containers" ]; then
              docker rm -f $old_containers
            fi
          fi

          # Clean up old images except the one we just deployed
          current_image="${{ secrets.DOCKER_USERNAME }}/zd-article-grabber:${{ env.IMAGE_TAG }}"
          echo "Protecting current image: $current_image"

            # List all images related to our application
            echo "All images before cleanup:"
            docker images "${{ secrets.DOCKER_USERNAME }}/zd-article-grabber" --format "{{.Repository}}:{{.Tag}} ({{.ID}}) - {{.CreatedAt}}"

            # Find images to remove (all except the current one and the 2 previous versions)
            image_count=$(docker images "${{ secrets.DOCKER_USERNAME }}/zd-article-grabber" --format "{{.ID}}" | wc -l)

            if [ "$image_count" -gt 3 ]; then
              echo "More than 3 images found, cleaning up older ones..."
              
              # Get the current image ID to protect it
              current_image_id=$(docker images "$current_image" --format "{{.ID}}")
              echo "Current image ID to protect: $current_image_id"
              
              # Get the latest 3 image IDs by creation date to keep
              keep_images=$(docker images "${{ secrets.DOCKER_USERNAME }}/zd-article-grabber" \
                          --format "{{.ID}} {{.CreatedAt}}" \
                          | sort -k2,2r \
                          | head -n 3 \
                          | awk '{print $1}')
              
              echo "Images to keep: $keep_images"
              
              # Find and remove old images
              remove_images=$(docker images "${{ secrets.DOCKER_USERNAME }}/zd-article-grabber" \
                            --format "{{.ID}}" \
                            | grep -v "$current_image_id" \
                            | grep -v -F "$(echo "$keep_images" | tr '\n' '|' | sed 's/|$//')")
              
              if [ ! -z "$remove_images" ]; then
                echo "Removing old images: $remove_images"
                docker rmi -f $remove_images
              else
                echo "No old images to remove"
              fi
            fi

            echo "Images after cleanup:"
            docker images "${{ secrets.DOCKER_USERNAME }}/zd-article-grabber" --format "{{.Repository}}:{{.Tag}} ({{.ID}}) - {{.CreatedAt}}"

          EOF
